{"version":3,"sources":["Nav.js","axios.js","Request.js","Banner.js","Row.js","screens/HomeScreen.js","firebase.js","screens/SignupScreen.js","screens/LoginScreen.js","features/userSlice.js","screens/PlansScreen.js","screens/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Nav","useState","show","handleShow","history","useHistory","transitionNavbar","window","scrollY","useEffect","addEventListener","removeEventListener","className","onClick","push","src","alt","instance","axios","create","baseURL","API_KEY","request","fetchTrending","fetchNetflixOrginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","string","n","movie","setMovie","a","get","requests","data","results","Math","floor","random","length","fetchData","console","log","style","backgroundImage","backdrop_path","backgroundSize","backgroundPosition","title","original_name","name","overview","substr","Row","fetchUrl","isLargeRow","setMovies","map","poster_path","id","HomeScreen","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","auth","SignupScreen","emailRef","useRef","passwordRef","ref","placeholder","type","e","preventDefault","createUserWithEmailAndPassword","current","value","then","authUser","catch","error","alert","message","LoginScreen","signIn","setSignIn","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","PlansScreen","products","setProducts","useSelector","subscription","setSubscription","collection","doc","uid","querySnapshot","forEach","role","current_period_end","seconds","current_period_start","where","productDoc","docs","price","prices","priceId","priceData","loadCheckout","add","success_url","location","origin","cancel_url","docRef","onSnapshot","snap","sessionId","loadStripe","redirectToCheckout","Date","toLocaleDateString","Object","entries","productId","productData","isCurrentPackage","toLowerCase","includes","description","ProfileScreen","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","path","configureStore","reducer","userReducer","Boolean","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0224d4fc.chunk.js","sourcesContent":["import React,{useState, useEffect} from 'react';\nimport { useHistory } from 'react-router-dom';\nimport \"./Nav.css\";\n\n\nfunction Nav() {\n\n    const [show, handleShow] = useState(false);\n    \n    const history = useHistory()\n\n    const transitionNavbar = () =>{\n        if(window.scrollY>100){\n            handleShow(true);\n        }\n        else{\n            handleShow(false);\n        }\n    };\n\n    useEffect(() => {\n        window.addEventListener(\"scroll\", transitionNavbar);\n        return () => window.removeEventListener(\"scroll\", transitionNavbar);\n    }, []);\n\n    return (\n        <div className= {`nav ${show && \"nav_black\"}`}>\n            <div className=\"nav_contents\">\n                <img\n                    onClick={()=>history.push(\"/\")}\n                    className=\"nav_logo\" src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\n                    alt=\"\"/>\n\n                <img\n                    onClick={()=>history.push(\"/profile\")}\n                    className=\"nav_avatar\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\n                    alt=\"\"/>    \n            </div>     \n        </div>\n    );\n}\n\nexport default Nav;\n","import axios from 'axios' \n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;\n","const API_KEY = \"61e3bf53bb37b550acd4edaffccb7b69\";\n\nconst request = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOrginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n}\n\nexport default request;","\nimport React, { useEffect, useState } from 'react';\nimport './Banner.css';\nimport axios from './axios'\nimport request from './Request'\n\nfunction Banner() {\n\n    const [movie, setMovie] = useState([]);\n    \n    useEffect(() => {\n        async function fetchData(){ \n        const requests = await axios.get(request.fetchNetflixOrginals);\n        setMovie(\n            requests.data.results[\n            Math.floor(Math.random() * requests.data.results.length - 1)\n            ]\n        );\n        return requests;\n    }\n        fetchData();\n},\n[])\n\n    console.log(movie)\n        function truncate(string, n) {\n            return string?.length > n ? string.substr(0, n - 1) + \"...\" : string;\n        }\n            \n          \n    return (\n      \n        <header className=\"banner\"\n            style={{\n            backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n            backgroundSize: \"cover\",\n            backgroundPosition:\"center center\",\n            }}\n            \n        >\n            <div className=\"banner_contents\">\n                <h1 className=\"banner_title\">{movie?.title || movie?.original_name || movie?.name }</h1>\n                <div className=\"banner_buttons\">\n                    <button className=\"banner_button\">Play</button>\n                    <button className=\"banner_button\">My list</button>\n                </div>\n                <h1 className=\"banner_description\">{truncate(movie?.overview,150)}\n                </h1>\n            </div>\n            <div className=\"banner_fadebottom\" />\n        </header>\n    )\n}\n\nexport default Banner\n","import React,{ useEffect ,useState} from 'react'\nimport \"./Row.css\"\nimport axios from './axios'\nimport request from './Request'\n\nfunction Row({ title, fetchUrl, isLargeRow = false }) {\n    \n    const [movie, setMovies] = useState([])\n    \n    const base_url = \"https://image.tmdb.org/t/p/original/\"\n\n    useEffect(() => {\n        async function fetchData() {\n            const requests = await axios.get(fetchUrl)\n\n            setMovies(requests.data.results)\n            return requests\n        }\n        fetchData()\n\n    }, [fetchUrl])\n\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2> \n            \n            <div className=\"row__posters\">\n                {movie.map(\n                    (movie) => (\n                    ((isLargeRow && movie.poster_path) ||\n                    (!isLargeRow && movie.backdrop_path)) && (\n\n                        <img\n                    className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                    key={movie.id}\n                    src={`${base_url}${\n                    isLargeRow?movie.poster_path : movie.backdrop_path\n                                }`}\n                            alt={movie.name} />\n                            ))\n            )}\n                    \n                \n\n            </div>\n\n            \n        </div>\n    )\n}\n\nexport default Row\n","import React from 'react';\nimport \"./HomeScreen.css\";\nimport Nav from '../Nav';\nimport Banner from '../Banner';\nimport request from '../Request'\nimport Row from '../Row'\n\n\nfunction  HomeScreen() {\n    return (\n        <div className=\"homescreen\">\n           <Nav />\n            <Banner />\n\n            <Row title=\"NETFLIX ORIGINALS\" fetchUrl={request.fetchNetflixOrginals}\n            isLargeRow/>\n\n\n            <Row title=\"Trending Now\" fetchUrl={request.fetchTrending} />\n            <Row title=\"Top Rated\" fetchUrl={request.fetchTopRated} />\n            <Row title=\"Action Movies\" fetchUrl={request.fetchActionMovies} />\n            <Row title=\"Comedy Movies\" fetchUrl={request.fetchComedyMovies} />\n            <Row title=\"Horror Movies\" fetchUrl={request.fetchHorrorMovies} />\n            <Row title=\"Romance Movies\" fetchUrl={request.fetchRomanceMovies} />\n            <Row title=\"Documentaries\" fetchUrl={request.fetchDocumentaries} />\n\n        </div>\n    );\n}\n\nexport default HomeScreen;\n","import firebase from 'firebase'\n\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyB2-9jd91tM64LDIH-e65PtIZ3GAa7PB5g\",\n    authDomain: \"netflix-clone-80544.firebaseapp.com\",\n    projectId: \"netflix-clone-80544\",\n    storageBucket: \"netflix-clone-80544.appspot.com\",\n    messagingSenderId: \"811443232117\",\n    appId: \"1:811443232117:web:8d9f3222178678be9cc73c\"\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig)\nconst db = firebaseApp.firestore()\nconst auth = firebase.auth()\n\nexport { auth }\nexport default db;\n  ","import React,{useRef} from 'react'\nimport \"./SignupScreen.css\"\nimport {auth} from \"../firebase\"\n\nfunction SignupScreen() {\n\n    const emailRef = useRef(null)\n    const passwordRef = useRef(null)\n\n\n    const register = (e) => {\n        e.preventDefault();\n\n        auth.createUserWithEmailAndPassword(\n            emailRef.current.value,\n            passwordRef.current.value\n        )\n            .then((authUser) => {\n                console.log(authUser)\n            })\n            .catch((error) => {\n                alert(error.message)\n            })\n        \n    \n    }\n\n    const signIn = (e) => {\n        e.preventDefault()\n\n        auth.createUserWithEmailAndPassword(\n            emailRef.current.value,\n            passwordRef.current.value\n        )\n            .then((authUser) => {\n                console.log(authUser)\n            })\n            .catch((error) =>alert(error.message))\n        \n    }\n\n    \n\n    return (\n        <div className=\"signupScreen\">\n            <form>\n                <h1>Sign In</h1>\n                <input ref={emailRef}  placeholder=\"Email\" type=\"email\" />\n                <input ref={passwordRef} placeholder=\"Password\" type=\"password\" />\n                <button type=\"submit\" onClick={signIn}>Sign In</button> \n\n                <h4>\n                    <span className=\"signupScreen_gray\">New to Netflix? </span>\n                    <span className =\"signupScreen_links\" onClick={register}>Sign Up now.</span>\n                </h4>\n            </form>\n        </div>\n    )\n}\n\nexport default SignupScreen\n","import React,{useState} from 'react'\nimport './LoginScreen.css'\nimport SignupScreen from './SignupScreen'\n\nfunction LoginScreen() {\n\n    const [signIn, setSignIn] = useState(false)\n\n    return (\n        <div className='LoginScreen'>\n            <div className=\"loginScreen_background\">\n                <img className=\"loginScreen_logo\"\n                    src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\n                    alt=\"\"></img>\n                \n                <button onClick={() => setSignIn(true)}\n                    className=\"loginScreen_button\">Sign In</button>\n\n                <div className=\"loginScreen_gradient\"></div>\n            </div>\n\n            <div className=\"loginScreen_body\">\n                \n                    {signIn ? (\n                        <SignupScreen />\n                ) : (\n                    <>\n                    <h1>Unlimited movies, TV shows and more.</h1>  \n                    <h2>Watch anywhere. Cancel anytime.</h2>\n                    <h3>Ready to watch? Enter your email to create or restart your membership.</h3>\n\n                    <div className=\"loginScreen_input\">   \n                    <form>\n                        <input type=\"email\" placeholder=\"Email Address\" />\n                            <button onClick={() => setSignIn(true)}\n                                className=\"loginScreen_getstarted\">\n                                GET STARTED\n                            </button>    \n                    </form>\n                    </div>\n                    </>  \n                    )}\n                    \n            </div>\n            \n        </div>\n    )\n}\n\nexport default LoginScreen\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user:null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = state => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import React, { useEffect, useState } from 'react'\nimport { useSelector } from \"react-redux\"\nimport {selectUser} from \"../features/userSlice\"\nimport db from '../firebase'\nimport \"./PlansScreen.css\"\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { getRoles } from '@testing-library/react'\n\nfunction PlansScreen() {\n\n    const [products, setProducts] = useState([]);\n    \n    const user = useSelector(selectUser)\n    \n    const [subscription, setSubscription] = useState(null)\n    \n    useEffect(() => {\n        db.collection(\"customers\")\n            .doc(user.uid)\n            .collection('subscriptions')\n            .get()\n            .then(querySnapshot => {\n                querySnapshot.forEach(async subscription => {\n                    setSubscription({\n                        role:subscription.data().role,\n                        current_period_end : subscription.data().current_period_end.seconds,\n                            current_period_start: subscription.data().current_period_start.seconds,\n                        \n                    })\n                    \n            })\n        })\n    },[user.uid])\n\n    useEffect(() => {\n        db.collection(\"products\").where(\"active\",\"==\", true)\n            .get()\n            .then((querySnapshot) => {\n                const products = {}\n                querySnapshot.forEach(async (productDoc) => {\n                    products[productDoc.id] = productDoc.data()\n                    const priceSnap = await productDoc.ref.collection\n                        (\"prices\").get()\n                    priceSnap.docs.forEach((price) =>{\n                        products[productDoc.id].prices = {\n                            priceId: price.id,\n                            priceData: price.data()\n                        }\n                        })\n                })\n                setProducts(products)\n        })\n    }, [])\n    console.log(products)\n     console.log(subscription)\n\n\n        const loadCheckout = async (priceId) => { \n            const docRef = await db\n                .collection(\"customers\")\n                .doc(user.uid)\n                .collection(\"checkout_sessions\")\n                .add({\n                    price: priceId,\n                    success_url: window.location.origin,\n                    cancel_url:window.location.origin,\n                })\n                    console.log(\"working1\")\n            \n            docRef.onSnapshot(async(snap) => {\n                const { error, sessionId } = snap.data();\n                \n                if (error) {\n                    console.log(\"working2\")\n                    \n                    alert(`An error occured: ${error.message}`)\n                }\n\n                if (sessionId) {\n                    console.log(\"working3\")\n\n\n                    const stripe = await loadStripe(\n                        \"pk_test_51INAeZC4PbIiBgBKOLJz4brw1qormmtWvafDPfGBG8an3OX3V5FrCsGKvU2cDbZHVJ5X7jE3rllw5Cfy5gAkLGQc00nvB1AXUI\")\n                    stripe.redirectToCheckout({ sessionId })\n                    \n                }\n            })\n    }\n\n    return (\n        <div className=\"plansScreen\">\n            <br/>\n            {subscription && (\n            <p>\n                    Renewal date: {\" \"}\n                    {new Date(\n                    subscription?.current_period_end * 1000\n                    ).toLocaleDateString()}\n            </p>\n            )}\n            {Object.entries(products).map(([productId, productData]) => {\n                \n                const isCurrentPackage = productData.name?.toLowerCase().includes(subscription?.role)\n\n                return (\n                    <div\n                        key={productId}\n                        className={`\n                        ${isCurrentPackage && \"plansScreen_plan--disabled\"\n                            } plansScreen_plan`}\n                    >\n                        <div className=\"plansScreen_info\">\n                            <h5>{productData.name}</h5>\n                            <h6>{productData.description}</h6>\n                        </div>\n                        <button onClick={()=> !isCurrentPackage && loadCheckout(productData.prices.priceId)}>\n                            {isCurrentPackage ? 'Current Package' : 'Subscribe'}\n                        </button>\n                    </div>\n                )\n            })}\n            \n        </div>\n    )\n}\n\nexport default PlansScreen\n","import React from 'react'\nimport \"./ProfileScreen.css\"\nimport Nav from \"../Nav\"\nimport { auth } from \"../firebase\"\nimport { useSelector } from \"react-redux\"\nimport {selectUser} from \"../features/userSlice\"\nimport PlansScreen from './PlansScreen'\n\nfunction ProfileScreen() {\n\n    const user = useSelector(selectUser)\n\n    return (\n        <div className=\"profileScreen\">\n            <Nav />\n            <div className=\"profileScreen_body\">\n                <h1>Edit Profile</h1>\n                <div className=\"profileScreen_info\">\n                    <img src=\"http://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\n                        alt=\"\"></img>\n                    <div className=\"profileScreen_details\">\n                        <h2>{user.email}</h2>\n                        <div className=\"profileScreen_plans\">\n                            <h3>Plans</h3>\n                            <PlansScreen />\n                        <button onClick={() => auth.signOut()}\n                         className=\"profileScreen_sigout\">Sign Out\n\n                        </button>\n                        </div>\n                        </div>\n                </div>\n            </div >\n            </div>\n      \n    )\n}\n\nexport default ProfileScreen\n","import React, {useEffect } from 'react';\r\n\r\nimport './App.css';\r\nimport HomeScreen from './screens/HomeScreen';\r\nimport LoginScreen from './screens/LoginScreen';\r\nimport ProfileScreen from './screens/ProfileScreen';\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { login,logout , selectUser} from \"./features/userSlice\";\r\nimport {auth} from \"./firebase\"\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\n \r\n\r\nfunction App() {\r\n\r\n  const user = useSelector(selectUser);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged((userAuth )=> {\r\n      if (userAuth)\r\n      {\r\n        dispatch(login({\r\n          uid: userAuth.uid,\r\n          email:userAuth.email,\r\n        }))\r\n\r\n      } else {\r\n        dispatch(logout())\r\n        }\r\n    })\r\n    return unsubscribe\r\n},[])\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Router>\r\n      {!user ?(\r\n          <LoginScreen />) : ( \r\n            <Switch> \r\n              <Route path=\"/profile\">\r\n                <ProfileScreen />\r\n                </Route>\r\n            <Route path=\"/\">\r\n              <HomeScreen />\r\n          </Route>\r\n        </Switch>  \r\n        )}\r\n       </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}