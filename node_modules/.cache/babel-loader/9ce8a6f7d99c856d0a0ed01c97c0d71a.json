{"ast":null,"code":"import _regeneratorRuntime from\"/Users/prov/Documents/Front-end projects/netflix-build-clone/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/prov/Documents/Front-end projects/netflix-build-clone/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/prov/Documents/Front-end projects/netflix-build-clone/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import\"./Row.css\";import axios from'./axios';import request from'./Request';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Row(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,_ref$isLargeRow=_ref.isLargeRow,isLargeRow=_ref$isLargeRow===void 0?false:_ref$isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movie=_useState2[0],setMovies=_useState2[1];var base_url=\"https://image.tmdb.org/t/p/original/\";useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var requests;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:requests=_context.sent;setMovies(requests.data.results);return _context.abrupt(\"return\",requests);case 5:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchUrl]);return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h2\",{children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"row__posters\",children:movie.map(function(movie){return(isLargeRow&&movie.poster_path||!isLargeRow&&movie.backdrop_path)&&/*#__PURE__*/_jsx(\"img\",{className:\"row__poster \".concat(isLargeRow&&\"row__posterLarge\"),src:\"\".concat(base_url).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.name},movie.id);})})]});}export default Row;","map":{"version":3,"sources":["/Users/prov/Documents/Front-end projects/netflix-build-clone/src/Row.js"],"names":["React","useEffect","useState","axios","request","Row","title","fetchUrl","isLargeRow","movie","setMovies","base_url","fetchData","get","requests","data","results","map","poster_path","backdrop_path","name","id"],"mappings":"0aAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,CAA0BC,QAA1B,KAAyC,OAAzC,CACA,MAAO,WAAP,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,C,wFAEA,QAASC,CAAAA,GAAT,MAAsD,IAAvCC,CAAAA,KAAuC,MAAvCA,KAAuC,CAAhCC,QAAgC,MAAhCA,QAAgC,sBAAtBC,UAAsB,CAAtBA,UAAsB,0BAAT,KAAS,+BAEvBN,QAAQ,CAAC,EAAD,CAFe,wCAE3CO,KAF2C,eAEpCC,SAFoC,eAIlD,GAAMC,CAAAA,QAAQ,CAAG,sCAAjB,CAEAV,SAAS,CAAC,UAAM,SACGW,CAAAA,SADH,qIACZ,sKAC2BT,CAAAA,KAAK,CAACU,GAAN,CAAUN,QAAV,CAD3B,QACUO,QADV,eAGIJ,SAAS,CAACI,QAAQ,CAACC,IAAT,CAAcC,OAAf,CAAT,CAHJ,gCAIWF,QAJX,wDADY,4CAOZF,SAAS,GAEZ,CATQ,CASN,CAACL,QAAD,CATM,CAAT,CAWA,mBACI,aAAK,SAAS,CAAC,KAAf,wBACI,oBAAKD,KAAL,EADJ,cAGI,YAAK,SAAS,CAAC,cAAf,UACKG,KAAK,CAACQ,GAAN,CACG,SAACR,KAAD,QACA,CAAED,UAAU,EAAIC,KAAK,CAACS,WAArB,EACA,CAACV,UAAD,EAAeC,KAAK,CAACU,aADtB,gBAGI,YACJ,SAAS,uBAAiBX,UAAU,EAAI,kBAA/B,CADL,CAGJ,GAAG,WAAKG,QAAL,SACHH,UAAU,CAACC,KAAK,CAACS,WAAP,CAAqBT,KAAK,CAACU,aADlC,CAHC,CAMI,GAAG,CAAEV,KAAK,CAACW,IANf,EAECX,KAAK,CAACY,EAFP,CAJJ,EADH,CADL,EAHJ,GADJ,CA2BH,CAED,cAAehB,CAAAA,GAAf","sourcesContent":["import React,{ useEffect ,useState} from 'react'\nimport \"./Row.css\"\nimport axios from './axios'\nimport request from './Request'\n\nfunction Row({ title, fetchUrl, isLargeRow = false }) {\n    \n    const [movie, setMovies] = useState([])\n    \n    const base_url = \"https://image.tmdb.org/t/p/original/\"\n\n    useEffect(() => {\n        async function fetchData() {\n            const requests = await axios.get(fetchUrl)\n\n            setMovies(requests.data.results)\n            return requests\n        }\n        fetchData()\n\n    }, [fetchUrl])\n\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2> \n            \n            <div className=\"row__posters\">\n                {movie.map(\n                    (movie) => (\n                    ((isLargeRow && movie.poster_path) ||\n                    (!isLargeRow && movie.backdrop_path)) && (\n\n                        <img\n                    className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                    key={movie.id}\n                    src={`${base_url}${\n                    isLargeRow?movie.poster_path : movie.backdrop_path\n                                }`}\n                            alt={movie.name} />\n                            ))\n            )}\n                    \n                \n\n            </div>\n\n            \n        </div>\n    )\n}\n\nexport default Row\n"]},"metadata":{},"sourceType":"module"}