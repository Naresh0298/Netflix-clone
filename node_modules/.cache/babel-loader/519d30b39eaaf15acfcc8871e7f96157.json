{"ast":null,"code":"var _jsxFileName = \"/Users/prov/Documents/Front-end projects/netflix-build-clone/src/screens/PlansScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../features/userSlice\";\nimport db from '../firebase';\nimport \"./PlansScreen.css\";\nimport { loadstripe } from \"@stripe/stripe-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PlansScreen() {\n  _s();\n\n  const [products, setProducts] = useState([]);\n  const user = useSelector(selectUser);\n  useEffect(() => {\n    db.collection('products').where('active', '==', true).get().then(querySnapshot => {\n      const products = {};\n      querySnapshot.forEach(async productDoc => {\n        products[productDoc.id] = productDoc.data();\n        const priceSnap = await productDoc.ref.collection(\"prices\").get();\n        priceSnap.docs.forEach(price => {\n          products[productDoc.id].prices = {\n            priceId: price.id,\n            priceId: price.data()\n          };\n        });\n      });\n      setProducts(products);\n    });\n  }, []);\n  console.log(products);\n\n  const loadCheckout = async priceId => {\n    const docRef = await db.collection(\"customers\").doc().collection(\"checkout_sessions\").add({\n      price: priceId,\n      success_url: window.location.origin,\n      cancel_url: window.location.origin\n    });\n    docRef.onSnapshot(async snap => {\n      const {\n        error,\n        sessionId\n      } = snap.data();\n\n      if (error) {\n        alert(`An error occured:${error.message}`);\n      }\n\n      if (sessionId) {\n        const stripe = await loadstripe('sk_test_51INAeZC4PbIiBgBKzhVXfIdfmCGtyGMEqoJEWTpTvY0OTfUvyzvrGOUqmOdcCiXpaOd3OwGGwLlCmO2gTpyw6LRe00SNpGdXYF');\n        stripe.redirectToCheckout({\n          sessionId\n        });\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"plansScreen\",\n    children: Object.entries(products).map(([productId, productData]) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"plansScreen_plan\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"plansScreen_info\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: productData.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n            children: productData.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => loadCheckout(productData.prices.priceId),\n          children: \"Subscribe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PlansScreen, \"nuatpq5LhrWF8CWFG6V8/grvPqY=\", false, function () {\n  return [useSelector];\n});\n\n_c = PlansScreen;\nexport default PlansScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlansScreen\");","map":{"version":3,"sources":["/Users/prov/Documents/Front-end projects/netflix-build-clone/src/screens/PlansScreen.js"],"names":["React","useEffect","useState","useSelector","selectUser","db","loadstripe","PlansScreen","products","setProducts","user","collection","where","get","then","querySnapshot","forEach","productDoc","id","data","priceSnap","ref","docs","price","prices","priceId","console","log","loadCheckout","docRef","doc","add","success_url","window","location","origin","cancel_url","onSnapshot","snap","error","sessionId","alert","message","stripe","redirectToCheckout","Object","entries","map","productId","productData","name","description"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useSelector } from \"react-redux\"\nimport {selectUser} from \"../features/userSlice\"\nimport db from '../firebase'\nimport \"./PlansScreen.css\"\nimport { loadstripe } from \"@stripe/stripe-js\";\n\nfunction PlansScreen() {\n\n    const [products, setProducts] = useState([])\n    const user = useSelector(selectUser)\n\n   \n    \n    useEffect(() => {\n        db.collection('products').where('active', '==', true)\n            .get().then(querySnapshot => {\n                const products = {}\n                querySnapshot.forEach(async (productDoc) => {\n                    products[productDoc.id] = productDoc.data()\n                    const priceSnap = await productDoc.ref.collection\n                        (\"prices\").get()\n                    priceSnap.docs.forEach((price) =>{\n                        products[productDoc.id].prices = {\n                            priceId: price.id,\n                            priceId: price.data()\n                        }\n                        })\n                })\n                setProducts(products)\n        })\n    }, [])\n    console.log(products)\n\n\n     const loadCheckout = async (priceId) => { \n         const docRef = await db\n             .collection(\"customers\")\n             .doc()\n             .collection(\"checkout_sessions\")\n             .add({\n                 price: priceId,\n                 success_url: window.location.origin,\n                 cancel_url:window.location.origin,\n             })\n         docRef.onSnapshot(async (snap) => {\n             const { error, sessionId } = snap.data()\n             \n             if (error) {\n                 \n                 alert(`An error occured:${error.message}`)\n             }\n\n             if (sessionId) {\n                 const stripe = await loadstripe('sk_test_51INAeZC4PbIiBgBKzhVXfIdfmCGtyGMEqoJEWTpTvY0OTfUvyzvrGOUqmOdcCiXpaOd3OwGGwLlCmO2gTpyw6LRe00SNpGdXYF')\n                stripe.redirectToCheckout({sessionId})\n                 \n             }\n         })\n    }\n\n    return (\n        <div className=\"plansScreen\">\n            {Object.entries(products).map(([productId, productData]) => {\n                \n                return (\n                    <div className=\"plansScreen_plan\">\n                        <div className=\"plansScreen_info\">\n                            <h5>{productData.name}</h5>\n                            <h6>{productData.description}</h6>\n                        </div>\n                        <button onClick={()=>loadCheckout(productData.prices.priceId)}>\n                            Subscribe\n                        </button>\n                    </div>\n                )\n            })}\n            \n        </div>\n    )\n}\n\nexport default PlansScreen\n"]},"metadata":{},"sourceType":"module"}