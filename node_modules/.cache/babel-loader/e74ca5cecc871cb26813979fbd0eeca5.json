{"ast":null,"code":"var _jsxFileName = \"/Users/prov/Documents/Front-end projects/netflix-build-clone/src/screens/PlansScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../features/userSlice\";\nimport db from '../firebase';\nimport \"./PlansScreen.css\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { getRoles } from '@testing-library/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PlansScreen() {\n  _s();\n\n  const [products, setProducts] = useState([]);\n  const user = useSelector(selectUser);\n  const [subscription, setSubscription] = useState(null);\n  useEffect(() => {\n    db.collection(\"customers\").doc(user.uid).collection('subscriptions').get().then(querySnapshot => {\n      querySnapshot.forEach(async subscription => {\n        setSubscription({\n          role: subscription.data().role,\n          current_period_end: subscription.data().current_period_end.seconds,\n          current_period_start: subscription.data().current_period_start.seconds\n        });\n      });\n    });\n  }, [user.uid]);\n  useEffect(() => {\n    db.collection(\"products\").where(\"active\", \"==\", true).get().then(querySnapshot => {\n      const products = {};\n      querySnapshot.forEach(async productDoc => {\n        products[productDoc.id] = productDoc.data();\n        const priceSnap = await productDoc.ref.collection(\"prices\").get();\n        priceSnap.docs.forEach(price => {\n          products[productDoc.id].prices = {\n            priceId: price.id,\n            priceData: price.data()\n          };\n        });\n      });\n      setProducts(products);\n    });\n  }, []);\n  console.log(products);\n  console.log(subscription);\n\n  const loadCheckout = async priceId => {\n    const docRef = await db.collection(\"customers\").doc(user.uid).collection(\"checkout_sessions\").add({\n      price: priceId,\n      success_url: window.location.origin,\n      cancel_url: window.location.origin\n    });\n    console.log(\"working1\");\n    docRef.onSnapshot(async snap => {\n      const {\n        error,\n        sessionId\n      } = snap.data();\n\n      if (error) {\n        console.log(\"working2\");\n        alert(`An error occured: ${error.message}`);\n      }\n\n      if (sessionId) {\n        console.log(\"working3\");\n        const stripe = await loadStripe(\"pk_test_51INAeZC4PbIiBgBKOLJz4brw1qormmtWvafDPfGBG8an3OX3V5FrCsGKvU2cDbZHVJ5X7jE3rllw5Cfy5gAkLGQc00nvB1AXUI\");\n        stripe.redirectToCheckout({\n          sessionId\n        });\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"plansScreen\",\n    children: [subscription && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Renewal date:\", \" \", new Date((subscription === null || subscription === void 0 ? void 0 : subscription.current_period_end) * 1000).toLocalDateString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), Object.entries(products).map(([productId, productData]) => {\n      var _productData$name;\n\n      const isCurrentPackage = (_productData$name = productData.name) === null || _productData$name === void 0 ? void 0 : _productData$name.toLowerCase().includes(subscription === null || subscription === void 0 ? void 0 : subscription.role);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `\n                        ${isCurrentPackage && \"plansScreen_plan--disabled\"} plansScreen_plan`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"plansScreen_info\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: productData.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n            children: productData.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => !isCurrentPackage && loadCheckout(productData.prices.priceId),\n          children: isCurrentPackage ? 'Current Package' : 'Subscribe'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }, this)]\n      }, productId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PlansScreen, \"60ANDhvF363l9RFtL6pi3jSO424=\", false, function () {\n  return [useSelector];\n});\n\n_c = PlansScreen;\nexport default PlansScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlansScreen\");","map":{"version":3,"sources":["/Users/prov/Documents/Front-end projects/netflix-build-clone/src/screens/PlansScreen.js"],"names":["React","useEffect","useState","useSelector","selectUser","db","loadStripe","getRoles","PlansScreen","products","setProducts","user","subscription","setSubscription","collection","doc","uid","get","then","querySnapshot","forEach","role","data","current_period_end","seconds","current_period_start","where","productDoc","id","priceSnap","ref","docs","price","prices","priceId","priceData","console","log","loadCheckout","docRef","add","success_url","window","location","origin","cancel_url","onSnapshot","snap","error","sessionId","alert","message","stripe","redirectToCheckout","Date","toLocalDateString","Object","entries","map","productId","productData","isCurrentPackage","name","toLowerCase","includes","description"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAAQC,UAAR,QAAyB,uBAAzB;AACA,OAAOC,EAAP,MAAe,aAAf;AACA,OAAO,mBAAP;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,QAAT,QAAyB,wBAAzB;;;AAEA,SAASC,WAAT,GAAuB;AAAA;;AAEnB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAMS,IAAI,GAAGR,WAAW,CAACC,UAAD,CAAxB;AAEA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,IAAD,CAAhD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,EAAE,CAACS,UAAH,CAAc,WAAd,EACKC,GADL,CACSJ,IAAI,CAACK,GADd,EAEKF,UAFL,CAEgB,eAFhB,EAGKG,GAHL,GAIKC,IAJL,CAIUC,aAAa,IAAI;AACnBA,MAAAA,aAAa,CAACC,OAAd,CAAsB,MAAMR,YAAN,IAAsB;AACxCC,QAAAA,eAAe,CAAC;AACZQ,UAAAA,IAAI,EAACT,YAAY,CAACU,IAAb,GAAoBD,IADb;AAEZE,UAAAA,kBAAkB,EAAGX,YAAY,CAACU,IAAb,GAAoBC,kBAApB,CAAuCC,OAFhD;AAGRC,UAAAA,oBAAoB,EAAEb,YAAY,CAACU,IAAb,GAAoBG,oBAApB,CAAyCD;AAHvD,SAAD,CAAf;AAOP,OARG;AASP,KAdD;AAeH,GAhBQ,EAgBP,CAACb,IAAI,CAACK,GAAN,CAhBO,CAAT;AAkBAf,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,EAAE,CAACS,UAAH,CAAc,UAAd,EAA0BY,KAA1B,CAAgC,QAAhC,EAAyC,IAAzC,EAA+C,IAA/C,EACKT,GADL,GAEKC,IAFL,CAEWC,aAAD,IAAmB;AACrB,YAAMV,QAAQ,GAAG,EAAjB;AACAU,MAAAA,aAAa,CAACC,OAAd,CAAsB,MAAOO,UAAP,IAAsB;AACxClB,QAAAA,QAAQ,CAACkB,UAAU,CAACC,EAAZ,CAAR,GAA0BD,UAAU,CAACL,IAAX,EAA1B;AACA,cAAMO,SAAS,GAAG,MAAMF,UAAU,CAACG,GAAX,CAAehB,UAAf,CACnB,QADmB,EACTG,GADS,EAAxB;AAEAY,QAAAA,SAAS,CAACE,IAAV,CAAeX,OAAf,CAAwBY,KAAD,IAAU;AAC7BvB,UAAAA,QAAQ,CAACkB,UAAU,CAACC,EAAZ,CAAR,CAAwBK,MAAxB,GAAiC;AAC7BC,YAAAA,OAAO,EAAEF,KAAK,CAACJ,EADc;AAE7BO,YAAAA,SAAS,EAAEH,KAAK,CAACV,IAAN;AAFkB,WAAjC;AAIC,SALL;AAMH,OAVD;AAWAZ,MAAAA,WAAW,CAACD,QAAD,CAAX;AACP,KAhBD;AAiBH,GAlBQ,EAkBN,EAlBM,CAAT;AAmBA2B,EAAAA,OAAO,CAACC,GAAR,CAAY5B,QAAZ;AACC2B,EAAAA,OAAO,CAACC,GAAR,CAAYzB,YAAZ;;AAGG,QAAM0B,YAAY,GAAG,MAAOJ,OAAP,IAAmB;AACpC,UAAMK,MAAM,GAAG,MAAMlC,EAAE,CAClBS,UADgB,CACL,WADK,EAEhBC,GAFgB,CAEZJ,IAAI,CAACK,GAFO,EAGhBF,UAHgB,CAGL,mBAHK,EAIhB0B,GAJgB,CAIZ;AACDR,MAAAA,KAAK,EAAEE,OADN;AAEDO,MAAAA,WAAW,EAAEC,MAAM,CAACC,QAAP,CAAgBC,MAF5B;AAGDC,MAAAA,UAAU,EAACH,MAAM,CAACC,QAAP,CAAgBC;AAH1B,KAJY,CAArB;AASQR,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AAERE,IAAAA,MAAM,CAACO,UAAP,CAAkB,MAAMC,IAAN,IAAe;AAC7B,YAAM;AAAEC,QAAAA,KAAF;AAASC,QAAAA;AAAT,UAAuBF,IAAI,CAACzB,IAAL,EAA7B;;AAEA,UAAI0B,KAAJ,EAAW;AACPZ,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AAEAa,QAAAA,KAAK,CAAE,qBAAoBF,KAAK,CAACG,OAAQ,EAApC,CAAL;AACH;;AAED,UAAIF,SAAJ,EAAe;AACXb,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AAGA,cAAMe,MAAM,GAAG,MAAM9C,UAAU,CAC3B,6GAD2B,CAA/B;AAEA8C,QAAAA,MAAM,CAACC,kBAAP,CAA0B;AAAEJ,UAAAA;AAAF,SAA1B;AAEH;AACJ,KAlBD;AAmBP,GA/BG;;AAiCJ,sBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,eACKrC,YAAY,iBACb;AAAA,kCACsB,GADtB,EAES,IAAI0C,IAAJ,CACD,CAAA1C,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEW,kBAAd,IAAmC,IADlC,EAECgC,iBAFD,EAFT;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EASKC,MAAM,CAACC,OAAP,CAAehD,QAAf,EAAyBiD,GAAzB,CAA6B,CAAC,CAACC,SAAD,EAAYC,WAAZ,CAAD,KAA8B;AAAA;;AAExD,YAAMC,gBAAgB,wBAAGD,WAAW,CAACE,IAAf,sDAAG,kBAAkBC,WAAlB,GAAgCC,QAAhC,CAAyCpD,YAAzC,aAAyCA,YAAzC,uBAAyCA,YAAY,CAAES,IAAvD,CAAzB;AAEA,0BACI;AAEI,QAAA,SAAS,EAAG;AACpC,0BAA0BwC,gBAAgB,IAAI,4BACjB,mBAJT;AAAA,gCAMI;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA,kCACI;AAAA,sBAAKD,WAAW,CAACE;AAAjB;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA,sBAAKF,WAAW,CAACK;AAAjB;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ,eAUI;AAAQ,UAAA,OAAO,EAAE,MAAK,CAACJ,gBAAD,IAAqBvB,YAAY,CAACsB,WAAW,CAAC3B,MAAZ,CAAmBC,OAApB,CAAvD;AAAA,oBACK2B,gBAAgB,GAAG,iBAAH,GAAuB;AAD5C;AAAA;AAAA;AAAA;AAAA,gBAVJ;AAAA,SACSF,SADT;AAAA;AAAA;AAAA;AAAA,cADJ;AAgBH,KApBA,CATL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkCH;;GApHQnD,W;UAIQL,W;;;KAJRK,W;AAsHT,eAAeA,WAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useSelector } from \"react-redux\"\nimport {selectUser} from \"../features/userSlice\"\nimport db from '../firebase'\nimport \"./PlansScreen.css\"\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { getRoles } from '@testing-library/react'\n\nfunction PlansScreen() {\n\n    const [products, setProducts] = useState([]);\n    \n    const user = useSelector(selectUser)\n    \n    const [subscription, setSubscription] = useState(null)\n    \n    useEffect(() => {\n        db.collection(\"customers\")\n            .doc(user.uid)\n            .collection('subscriptions')\n            .get()\n            .then(querySnapshot => {\n                querySnapshot.forEach(async subscription => {\n                    setSubscription({\n                        role:subscription.data().role,\n                        current_period_end : subscription.data().current_period_end.seconds,\n                            current_period_start: subscription.data().current_period_start.seconds,\n                        \n                    })\n                    \n            })\n        })\n    },[user.uid])\n\n    useEffect(() => {\n        db.collection(\"products\").where(\"active\",\"==\", true)\n            .get()\n            .then((querySnapshot) => {\n                const products = {}\n                querySnapshot.forEach(async (productDoc) => {\n                    products[productDoc.id] = productDoc.data()\n                    const priceSnap = await productDoc.ref.collection\n                        (\"prices\").get()\n                    priceSnap.docs.forEach((price) =>{\n                        products[productDoc.id].prices = {\n                            priceId: price.id,\n                            priceData: price.data()\n                        }\n                        })\n                })\n                setProducts(products)\n        })\n    }, [])\n    console.log(products)\n     console.log(subscription)\n\n\n        const loadCheckout = async (priceId) => { \n            const docRef = await db\n                .collection(\"customers\")\n                .doc(user.uid)\n                .collection(\"checkout_sessions\")\n                .add({\n                    price: priceId,\n                    success_url: window.location.origin,\n                    cancel_url:window.location.origin,\n                })\n                    console.log(\"working1\")\n            \n            docRef.onSnapshot(async(snap) => {\n                const { error, sessionId } = snap.data();\n                \n                if (error) {\n                    console.log(\"working2\")\n                    \n                    alert(`An error occured: ${error.message}`)\n                }\n\n                if (sessionId) {\n                    console.log(\"working3\")\n\n\n                    const stripe = await loadStripe(\n                        \"pk_test_51INAeZC4PbIiBgBKOLJz4brw1qormmtWvafDPfGBG8an3OX3V5FrCsGKvU2cDbZHVJ5X7jE3rllw5Cfy5gAkLGQc00nvB1AXUI\")\n                    stripe.redirectToCheckout({ sessionId })\n                    \n                }\n            })\n    }\n\n    return (\n        <div className=\"plansScreen\">\n            {subscription && (\n            <p>\n                    Renewal date:{\" \"}\n                    {new Date(\n                    subscription?.current_period_end * 1000\n                    ).toLocalDateString()}\n            </p>\n            )}\n            {Object.entries(products).map(([productId, productData]) => {\n                \n                const isCurrentPackage = productData.name?.toLowerCase().includes(subscription?.role)\n\n                return (\n                    <div\n                        key={productId}\n                        className={`\n                        ${isCurrentPackage && \"plansScreen_plan--disabled\"\n                            } plansScreen_plan`}\n                    >\n                        <div className=\"plansScreen_info\">\n                            <h5>{productData.name}</h5>\n                            <h6>{productData.description}</h6>\n                        </div>\n                        <button onClick={()=> !isCurrentPackage && loadCheckout(productData.prices.priceId)}>\n                            {isCurrentPackage ? 'Current Package' : 'Subscribe'}\n                        </button>\n                    </div>\n                )\n            })}\n            \n        </div>\n    )\n}\n\nexport default PlansScreen\n"]},"metadata":{},"sourceType":"module"}