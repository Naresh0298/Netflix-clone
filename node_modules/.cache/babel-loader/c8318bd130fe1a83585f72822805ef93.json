{"ast":null,"code":"var _jsxFileName = \"/Users/prov/Documents/Front-end projects/netflix-build-clone/src/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport \"./Row.css\";\nimport axios from './axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow = false\n}) {\n  _s();\n\n  const [movie, setMovies] = useState([]);\n  const base_url = \"https://image.tmdb.org/t/p/original/\";\n  useEffect(() => {\n    async function fetchData() {\n      const requests = await axios.get(fetchUrl);\n      setMovies(requests.data.results);\n      return requests;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movie.map(movie => isLargeRow && movie.poster_path || isLargeRow && movie.backdrop_path && /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"S8hOdtxRAxmjqYdR79mBErPtric=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/prov/Documents/Front-end projects/netflix-build-clone/src/Row.js"],"names":["React","useEffect","useState","axios","Row","title","fetchUrl","isLargeRow","movie","setMovies","base_url","fetchData","requests","get","data","results","map","poster_path","backdrop_path","name","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,SAAlB;;;AAEA,SAASC,GAAT,CAAa;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA,UAAU,GAAG;AAAhC,CAAb,EAAsD;AAAA;;AAElD,QAAM,CAACC,KAAD,EAAQC,SAAR,IAAqBP,QAAQ,CAAC,EAAD,CAAnC;AAEA,QAAMQ,QAAQ,GAAG,sCAAjB;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeU,SAAf,GAA2B;AACvB,YAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAUP,QAAV,CAAvB;AAEAG,MAAAA,SAAS,CAACG,QAAQ,CAACE,IAAT,CAAcC,OAAf,CAAT;AACA,aAAOH,QAAP;AACH;;AACDD,IAAAA,SAAS;AAEZ,GATQ,EASN,CAACL,QAAD,CATM,CAAT;AAWA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA,gBAAKD;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBACKG,KAAK,CAACQ,GAAN,CACIR,KAAD,IACAD,UAAU,IAAIC,KAAK,CAACS,WADT,IAEVV,UAAU,IAAIC,KAAK,CAACU,aAApB,iBAEG;AACJ,QAAA,SAAS,EAAG,eAAcX,UAAU,IAAI,kBAAmB,EADvD;AAGJ,QAAA,GAAG,EAAG,GAAEG,QAAS,GACjBH,UAAU,GAACC,KAAK,CAACS,WAAP,GAAqBT,KAAK,CAACU,aACpB,EALb;AAKgB,QAAA,GAAG,EAAEV,KAAK,CAACW;AAL3B,SAECX,KAAK,CAACY,EAFP;AAAA;AAAA;AAAA;AAAA,cALP;AADL;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA0BH;;GA3CQhB,G;;KAAAA,G;AA6CT,eAAeA,GAAf","sourcesContent":["import React,{ useEffect ,useState} from 'react'\nimport \"./Row.css\"\nimport axios from './axios'\n\nfunction Row({ title, fetchUrl, isLargeRow = false }) {\n    \n    const [movie, setMovies] = useState([])\n    \n    const base_url = \"https://image.tmdb.org/t/p/original/\"\n\n    useEffect(() => {\n        async function fetchData() {\n            const requests = await axios.get(fetchUrl)\n\n            setMovies(requests.data.results)\n            return requests\n        }\n        fetchData()\n\n    }, [fetchUrl])\n\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2> \n            \n            <div className=\"row__posters\">\n                {movie.map(\n                    (movie) => (\n                    isLargeRow && movie.poster_path) ||\n                    (isLargeRow && movie.backdrop_path && (\n\n                        <img\n                    className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                    key={movie.id}\n                    src={`${base_url}${\n                    isLargeRow?movie.poster_path : movie.backdrop_path\n                                    }`} alt={movie.name} />\n                            ))\n            )}\n                    \n                \n\n            </div>\n\n            \n        </div>\n    )\n}\n\nexport default Row\n"]},"metadata":{},"sourceType":"module"}